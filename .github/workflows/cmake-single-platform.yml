# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "master", "dev" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v4
    - name: Install Dependency Packages
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential autoconf libtool pkg-config ninja-build g++-multilib linux-libc-dev-i386-cross
    - name: Download gRPC
      run: |
        mkdir -p dep/grpc
        export PATH="${{github.workspace}}/dep/grpc/bin:$PATH"
        mkdir dep_src
        cd dep_src
        git clone --recurse-submodules -b v1.66.0 --depth 1 --shallow-submodules https://github.com/grpc/grpc
        cd grpc
    - name: Configure gRPC
      working-directory: ${{github.workspace}}/dep_src/grpc
      run: >
        cmake -S . -B ${{github.workspace}}/dep_src/grpc/build -G Ninja
        -DCMAKE_CXX_STANDARD=14
        -DgRPC_INSTALL=ON
        -DgRPC_BUILD_TESTS=OFF
        -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/dep/grpc
    - name: Install gRPC
      run: cmake --build ${{github.workspace}}/dep_src/grpc/build --target install -- -j4
    - name: Configure CMake
      run: >
        cmake -S ${{github.workspace}}
        -B ${{github.workspace}}/build
        -G Ninja
        -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        -DCMAKE_CXX_STANDARD=14
        -DCMAKE_CXX_FLAGS=-m32
        -DCMAKE_PREFIX_PATH=${{github.workspace}}/dep/grpc
    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest -C ${{env.BUILD_TYPE}}

  build-dev:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-20.04
    env:
      DEP_PATH: ${{github.workspace}}/dep/grpc

    steps:
    - uses: actions/checkout@v4
      with:
        ref: dev
    - name: Install Dependency Packages
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential autoconf libtool pkg-config ninja-build g++-multilib linux-libc-dev-i386-cross
    - name: Download gRPC
      run: |
        mkdir -p dep/grpc
        export PATH="${{github.workspace}}/dep/grpc/bin:$PATH"
        mkdir dep_src
        cd dep_src
        git clone --recurse-submodules -b v1.66.0 --depth 1 --shallow-submodules https://github.com/grpc/grpc
        cd grpc
    - name: Configure gRPC
      working-directory: ${{github.workspace}}/dep_src/grpc
      run: >
        cmake -S . -B ${{github.workspace}}/dep_src/grpc/build -G Ninja
        -DCMAKE_CXX_STANDARD=14
        -DgRPC_INSTALL=ON
        -DgRPC_BUILD_TESTS=OFF
        -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/dep/grpc
    - name: Install gRPC
      working-directory: ${{github.workspace}}/dep_src/grpc
      run: cmake --build ${{github.workspace}}/dep_src/grpc/build --target install -- -j4
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -S ${{github.workspace}}
        -B ${{github.workspace}}/build
        -G Ninja
        -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        -DCMAKE_CXX_STANDARD=14
        -DCMAKE_CXX_FLAGS=-m32
        -DCMAKE_PREFIX_PATH=${{github.workspace}}/dep/grpc
    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -- -j4
    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
